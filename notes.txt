MAKE A PLAN
Implement Search Feature
1. Write a test (if we were doing TDD (Test Driven Development) we'd start with this!)
2. Make a search form - one input field and button that submits a url structured like this /search?term=pooodle
3. Make a /search route that responds with a template pets-search.html (we'll just reuse the pets-index.pug template)
4. Make the /search route actually search using our Pet model.

Tools:
- Bootstrap 4 navbar form( search ): https://getbootstrap.com/docs/4.0/components/navbar/#forms
- HTMl Converter:https://html2jade.org/

Search Route (bug fix - helpful resource):
https://stackoverflow.com/questions/7042340/error-cant-set-headers-after-they-are-sent-to-the-client?newreg=ec0251df45cf4b5ba46bf2c1c51cdc25

1. We are going to add pagination to the `/` and `/search` routes first and those both
use the pets-index.pug template, so we can use bootstrap's pagination snippet to
start that.

2. Next we need to add the mongoose-paginate module to extend Mongoose with
pagination methods to only return pages of 10 pets.

3. Finally we need to write a test for both routes so that we can ship it!

MAKE A PLAN
User Narrative of How the User Should Experience Errors
1. User puts in invalid data and hits submit
2. Without navigating away, user sees specifically the form elements that still need work with directions for what to do
3. User submits data that is still invalid (<1% of time)
4. User sees a general and generic error message that something has occurred

MAKE A PLAN
Upload Images
1. Get an AWS console account
2. Get our API public and secret keys and save them in our .env folder
3. Make a new "bucket" in AWS S3
4. Change the form to use multipart/form-data
5. Add some middleware to accept multipart/form-data: multer
6. Add some middleware to interact with the S3 API: s3-uploader
7. Initialize and use the middleware in the controller route.
8. Save the image URL into the database
9. Display the image using the URL

Accept Payment
1. Sign up for Stripe and get our public/private access keys
2. Add the drop in stripe checkout
3. Add stripe middleware for interacting with the stripe API.
4. Process the payment on the server
5. Save when the pet was purchased and by whom

Send Emails
1. Install and configure the nodemailer and nodemailer-mailgun-transport modules.
2. Sign up for an account with Mailgun
3. Add your email credentials to your .env file.
4. Send a sample email
5. Setup emails to send whenever a pet is sold.

Build Full-text Search
1. Add an index/Remove Existing indexes
2. Update your search query to use full text instead of regex

Question: "Remember we're not using Regex in the code above, so we will no longer
match partial strings" - What does this mean? We are now using Mongoose's Full
Text feature so we no longer need Regex.

Respond to JSON
1. Detect JSON Requests in addition to handling rendering as we did before
2. Test API endpoints

Deployment Update Ideas:
- To get pets possible add configuration of Database URI to Heroku
